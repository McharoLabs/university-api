services:
  db:
    image: postgres
    container_name: postgres_db
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./data/db:/var/lib/postgresql/data
    ports:
      - 5433:5432
    networks:
      - my_network

  redis:
    image: redis:alpine
    container_name: redis
    networks:
      - my_network

  backend:
    image: seranise/university-api:latest
    container_name: university-api
    command: gunicorn university_api.wsgi --bind 0.0.0.0:8000
    volumes:
      - static_files:/app/staticfiles
      - ./university_api:/app
    ports:
      - 8000:8000
    depends_on:
      - db
    networks:
      - my_network

  frontend1:
    image: seranise/university-client:latest
    container_name: frontend1
    environment:
      - VITE_NODE_ID=frontend1
    ports:
      - "3000:5173"
    depends_on:
      - backend
    networks:
      - my_network

  frontend2:
    image: seranise/university-client:latest
    container_name: frontend2
    environment:
      - VITE_NODE_ID=frontend2
    ports:
      - "3001:5173"
    depends_on:
      - backend
    networks:
      - my_network

  frontend3:
    image: seranise/university-client:latest
    container_name: frontend3
    environment:
      - VITE_NODE_ID=frontend3
    ports:
      - "3002:5173"
    depends_on:
      - backend
    networks:
      - my_network

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_files:/app/staticfiles:ro
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt/original_certs:/etc/letsencrypt/original_certs:ro
      - /etc/letsencrypt/options-ssl-nginx.conf:/etc/letsencrypt/options-ssl-nginx.conf:ro
      - /etc/letsencrypt/ssl-dhparams.pem:/etc/letsencrypt/ssl-dhparams.pem:ro
    depends_on:
      - frontend1
      - frontend2
      - frontend3
      - backend
    networks:
      - my_network

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      - my_network

  celery:
    image: seranise/university-api:latest
    container_name: celery_worker
    command: celery -A university_api.celery worker --loglevel=info
    volumes:
      - ./university_api:/app
    depends_on:
      - redis
      - backend
    networks:
      - my_network

  celery-beat:
    image: seranise/university-api:latest
    container_name: celery_beat
    command: celery -A university_api.celery beat --loglevel=info
    volumes:
      - ./university_api:/app
    depends_on:
      - redis
      - backend
    networks:
      - my_network

networks:
  my_network:
    driver: bridge

volumes:
  static_files:
